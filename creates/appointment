
require('dotenv').config();

const { getPlaywrightVersion } = require('playwright-core/lib/utils');
const { chromium } = require('playwright-extra')
const stealth = require("puppeteer-extra-plugin-stealth")()
chromium.use(stealth);

const {expect} = require("expect");

const playwrightClientVersion = getPlaywrightVersion();

module.exports = {
    key: 'appointment',
    noun: 'appointment',
    display: {
      label: 'Create appointment',
      description: 'Creates a new calendly appointment.',
    },
    operation: {
      inputFields: [
        { key: 'first_name', label: 'First Name', required: true, type: 'string' },
        { key: 'last_name', label: 'Last Name', required: true, type: 'string' },
        { key: 'email', label: 'Email Address', required: true, type: 'string' },
        {
          key: 'url',
          label: 'Calendly URL',
          required: true,
          type: 'text',
          helpText: 'The Calendly URL for the available appointment time.',
        }
      ],
      perform: (z, bundle) => {
        let url = `${bundle.inputData.url}?first_name=${bundle.inputData.first_name}&last_name=${bundle.inputData.last_name}&email=${bundle.inputData.email}`;
        z.console.log(url);
        (async () => {
          const capabilities = {
            'browserName': 'Chrome',
            'browserVersion': 'latest',
            'LT:Options': {
              'platform': 'Windows 10',
              'build': 'Playwright Single Build',
              'name': 'Playwright Sample Test',
              'user': bundle.authData.username,
              'accessKey': bundle.authData.access_key,
              'network': true,
              'video': true,
              'console': true,
              'tunnel': false,
              'tunnelName': '',
              'geoLocation': 'US', // country code can be fetched from https://www.lambdatest.com/capabilities-generator/
              'timezone': 'New_York',
              'playwrightClientVersion': playwrightClientVersion
            }
          }
        
          const browser = await chromium.connect({
            wsEndpoint: `wss://cdp.lambdatest.com/playwright?capabilities=${encodeURIComponent(JSON.stringify(capabilities))}`
          })
        
          const page = await browser.newPage()
          await page.goto(url, { waitUntil: 'networkidle' });
        
          let element = await page.locator('BUTTON[type="submit"]');
          await element.click();
          
          await page.waitForTimeout(6000);
          /*await page.screenshot({ path: 'screenshot.png', fullPage: true });*/
          const title = await page.title();
        
          console.log(title);
        
          try {
            expect(title).toEqual('Confirmed - Calendly');
            await page.evaluate(_ => {}, `lambdatest_action: ${JSON.stringify({ action: 'setTestStatus', arguments: { status: 'passed', remark: 'Title matched' } })}`)
            await teardown(page, browser);
            return { created: true };
          } catch (e) {
            await page.evaluate(_ => {}, `lambdatest_action: ${JSON.stringify({ action: 'setTestStatus', arguments: { status: 'failed', remark: e.stack } })}`)
            await teardown(page, browser)
            return { created: false, error: e }
          }
        
        })()
        
        async function teardown(page, browser) {
          await page.close();
          await browser.close();
        }
    },
  
    // In cases where Zapier needs to show an example record to the user, but we are unable to get a live example
    // from the API, Zapier will fallback to this hard-coded sample. It should reflect the data structure of
    // returned records, and have obviously dummy values that we can show to any user.
    sample: {
      created: true
    },

    // If the resource can have fields that are custom on a per-user basis, define a function to fetch the custom
    // field definitions. The result will be used to augment the sample.
    // outputFields: () => { return []; }
    // Alternatively, a static field definition should be provided, to specify labels for the fields
    outputFields: [
    ],
  },
};