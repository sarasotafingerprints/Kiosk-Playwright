require('dotenv').config()

const { chromium } = require('playwright')
const {expect} = require("expect");
const playwrightClientVersion = '1.38.0';

// We recommend writing your creates separate like this and rolling them
// into the App definition at the end.
module.exports = {
    key: 'appointment',
  
    // You'll want to provide some helpful display labels and descriptions
    // for users. Zapier will put them into the UX.
    noun: 'appointment',
    display: {
      label: 'Create appointment',
      description: 'Creates a new calendly appointment.',
    },
  
    // `operation` is where the business logic goes.
    operation: {
      inputFields: [
        { key: 'first_name', label: 'First Name', required: true, type: 'string' },
        { key: 'last_name', label: 'Last Name', required: true, type: 'string' },
        { key: 'email', label: 'Email Address', required: true, type: 'string' },
        {
          key: 'url',
          label: 'Calendly URL',
          required: true,
          type: 'text',
          helpText: 'The Calendly URL for the available appointment time.',
        }
      ],
      perform: (z, bundle) => {
        let url = `${bundle.inputData.url}?first_name=${bundle.inputData.first_name}&last_name=${bundle.inputData.last_name}&email=${bundle.inputData.email}`;

        (async () => {
          const capabilities = {
            'browserName': 'Chrome', // Browsers allowed: `Chrome`, `MicrosoftEdge`, `pw-chromium`, `pw-firefox` and `pw-webkit`
            'browserVersion': 'latest',
            'LT:Options': {
              'platform': 'Windows 10',
              'build': 'Playwright Single Build',
              'name': 'Playwright Sample Test',
              'user': process.env.LT_USERNAME,
              'accessKey': process.env.LT_ACCESS_KEY,
              'network': true,
              'video': true,
              'console': true,
              'tunnel': false, // Add tunnel configuration if testing locally hosted webpage
              'tunnelName': '', // Optional
              'geoLocation': '', // country code can be fetched from https://www.lambdatest.com/capabilities-generator/
              'playwrightClientVersion': playwrightClientVersion
            }
          }
        
          const browser = await chromium.connect({
            wsEndpoint: `wss://cdp.lambdatest.com/playwright?capabilities=${encodeURIComponent(JSON.stringify(capabilities))}`
          })
        
          const page = await browser.newPage()
        
          await page.goto(url);
        
          let element = await page.locator("[name=\"q\"]");
          await element.click();
          await element.type("LambdaTest");
          await element.press("Enter");
          const title = await page.title()
        
          try {
            expect(title).toEqual('LambdaTest at DuckDuckGo')
            // Mark the test as completed or failed
            await page.evaluate(_ => {}, `lambdatest_action: ${JSON.stringify({ action: 'setTestStatus', arguments: { status: 'passed', remark: 'Title matched' } })}`)
            await teardown(page, browser)
          } catch (e) {
            await page.evaluate(_ => {}, `lambdatest_action: ${JSON.stringify({ action: 'setTestStatus', arguments: { status: 'failed', remark: e.stack } })}`)
            await teardown(page, browser)
            throw e
          }
        
        })()
        
        async function teardown(page, browser) {
          await page.close();
          await browser.close();

          let response = {};
          return promise.then((response) => null);
        }

      },
  
      // In cases where Zapier needs to show an example record to the user, but we are unable to get a live example
      // from the API, Zapier will fallback to this hard-coded sample. It should reflect the data structure of
      // returned records, and have obviously dummy values that we can show to any user.
      sample: {
        id: 1
      },
  
      // If the resource can have fields that are custom on a per-user basis, define a function to fetch the custom
      // field definitions. The result will be used to augment the sample.
      // outputFields: () => { return []; }
      // Alternatively, a static field definition should be provided, to specify labels for the fields
      outputFields: [
      ],
    },
  };