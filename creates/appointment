
require('dotenv').config();

const { getPlaywrightVersion } = require('playwright-core/lib/utils');
const { chromium } = require('playwright-extra')
const stealth = require("puppeteer-extra-plugin-stealth")()
chromium.use(stealth);

const {expect} = require("expect");

const playWrightClientVersion = getPlaywrightVersion();
console.log("playWrightClientVersion:", playWrightClientVersion);

module.exports = {
    key: 'appointment',
    noun: 'appointment',
    display: {
      label: 'Create appointment',
      description: 'Creates a new calendly appointment.',
    },
    operation: {
      inputFields: [
        { key: 'first_name', label: 'First Name', required: true, type: 'string' },
        { key: 'last_name', label: 'Last Name', required: true, type: 'string' },
        { key: 'email', label: 'Email Address', required: true, type: 'string' },
        {
          key: 'url',
          label: 'Calendly URL',
          required: true,
          type: 'text',
          helpText: 'The Calendly URL for the available appointment time.',
        }
      ],
      perform: (z, bundle) => {
        let url = `${bundle.inputData.url}?first_name=${bundle.inputData.first_name}&last_name=${bundle.inputData.last_name}&email=${bundle.inputData.email}`;
        z.console.log("url:", url);

        (async () => {
          const capabilities = {
            'browserName': 'Chrome', // Browsers allowed: `Chrome`, `MicrosoftEdge`, `pw-chromium`, `pw-firefox` and `pw-webkit`
            'browserVersion': 'latest',
            'LT:Options': {
              'platform': 'Windows 10',
              'build': 'Playwright Single Build',
              'name': 'Playwright Sample Test',
              'user': 'mikesarasotafingerprints',
              'accessKey': 'Jx7ybD7j7EDnqvenT9Be5rvp25ng9aBwYlq49gEdvXFIn97Q3F',
              'network': true,
              'video': true,
              'console': true,
              'tunnel': false, // Add tunnel configuration if testing locally hosted webpage
              'tunnelName': '', // Optional
              'geoLocation': '', // country code can be fetched from https://www.lambdatest.com/capabilities-generator/
              'playwrightClientVersion': playwrightClientVersion
            }
          }

          const browser = await chromium.connect({
            wsEndpoint: `wss://cdp.lambdatest.com/playwright?capabilities=${encodeURIComponent(JSON.stringify(capabilities))}`
          })

          const page = await browser.newPage()
          let url = "https://calendly.com/srqfingerprints/sarasota-fingerprints-appointment-walk-in/2023-09-21T17:00:00Z?first_name=Mike&last_name=Tester&email=mike@sarasotafingerprints.com";
          await page.goto(url, { waitUntil: 'networkidle' });

          let element = await page.locator('BUTTON[type="submit"]');
          await element.click();
          
          await page.waitForTimeout(6000);
          //await page.screenshot({ path: 'screenshot.png', fullPage: true });
          const title = await page.title();

          console.log(title);

          try {
            expect(title).toEqual('Confirmed - Calendly');
            // Mark the test as completed or failed
            await page.evaluate(_ => {}, `lambdatest_action: ${JSON.stringify({ action: 'setTestStatus', arguments: { status: 'passed', remark: 'Title matched' } })}`)
            await teardown(page, browser)
          } catch (e) {
            await page.evaluate(_ => {}, `lambdatest_action: ${JSON.stringify({ action: 'setTestStatus', arguments: { status: 'failed', remark: e.stack } })}`)
            await teardown(page, browser)
            throw e
          }

        })()

        async function teardown(page, browser) {
          await page.close();
          await browser.close();
        }
        
    },
  
    // In cases where Zapier needs to show an example record to the user, but we are unable to get a live example
    // from the API, Zapier will fallback to this hard-coded sample. It should reflect the data structure of
    // returned records, and have obviously dummy values that we can show to any user.
    sample: {
      created: true
    },

    // If the resource can have fields that are custom on a per-user basis, define a function to fetch the custom
    // field definitions. The result will be used to augment the sample.
    // outputFields: () => { return []; }
    // Alternatively, a static field definition should be provided, to specify labels for the fields
    outputFields: [
      { key:'created', type: 'boolean' }
    ]
  },
};