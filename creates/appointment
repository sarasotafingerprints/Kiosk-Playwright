
require('dotenv').config();

const { chromium } = require('playwright-extra');
const awsChromium = require('chrome-aws-lambda');
const pluginStealth = require("puppeteer-extra-plugin-stealth");

// Use stealth
chromium.use(pluginStealth);

const {expect} = require("expect");

// We recommend writing your creates separate like this and rolling them
// into the App definition at the end.
module.exports = {
    key: 'appointment',
  
    // You'll want to provide some helpful display labels and descriptions
    // for users. Zapier will put them into the UX.
    noun: 'appointment',
    display: {
      label: 'Create appointment',
      description: 'Creates a new calendly appointment.',
    },
  
    // `operation` is where the business logic goes.
    operation: {
      inputFields: [
        { key: 'first_name', label: 'First Name', required: true, type: 'string' },
        { key: 'last_name', label: 'Last Name', required: true, type: 'string' },
        { key: 'email', label: 'Email Address', required: true, type: 'string' },
        {
          key: 'url',
          label: 'Calendly URL',
          required: true,
          type: 'text',
          helpText: 'The Calendly URL for the available appointment time.',
        }
      ],
      perform: (z, bundle) => {
        let url = `${bundle.inputData.url}?first_name=${bundle.inputData.first_name}&last_name=${bundle.inputData.last_name}&email=${bundle.inputData.email}`;
        
        (async () => {
          try {
            const browser = await chromium.launch({
              headless: false,
              executablePath: awsChromium.executablePath,
            });
          
            const page = await browser.newPage();

            // Go to the website 
            await page.goto(url);
            // Wait for page to download
            await page.waitForTimeout(1000);
            let element = await page.locator('BUTTON[type="submit"]');
            await element.click();

            const title = await page.title();
            try {
              expect(title).toEqual('Confirmed - Calendly')
              // Mark the test as completed or failed
              await teardown(page, browser);
            } catch (e) {
              await teardown(page, browser);
              throw e
            }

          } catch (error) {
            throw error;
          } finally {
            if (browser) {
              await browser.close();
            }
          }
          
        })();
          
        async function teardown(page, browser) {
          await page.close();
          await browser.close();

          let response = {};
          return promise.then((response) => null);
        }
      },
  
      // In cases where Zapier needs to show an example record to the user, but we are unable to get a live example
      // from the API, Zapier will fallback to this hard-coded sample. It should reflect the data structure of
      // returned records, and have obviously dummy values that we can show to any user.
      sample: {
        id: 1
      },
  
      // If the resource can have fields that are custom on a per-user basis, define a function to fetch the custom
      // field definitions. The result will be used to augment the sample.
      // outputFields: () => { return []; }
      // Alternatively, a static field definition should be provided, to specify labels for the fields
      outputFields: [
      ],
    },
  };