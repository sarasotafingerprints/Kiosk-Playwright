
require('dotenv').config();

const test = require("node:test");

const chromium = require('chrome-aws-lambda');
const playwright = require('playwright-core');

module.exports = {
    key: 'appointment',
    noun: 'appointment',
    display: {
      label: 'Create appointment',
      description: 'Creates a new calendly appointment.',
    },
    operation: {
      inputFields: [
        { key: 'first_name', label: 'First Name', required: true, type: 'string' },
        { key: 'last_name', label: 'Last Name', required: true, type: 'string' },
        { key: 'email', label: 'Email Address', required: true, type: 'string' },
        {
          key: 'url',
          label: 'Calendly URL',
          required: true,
          type: 'text',
          helpText: 'The Calendly URL for the available appointment time.',
        }
      ],
      perform: (z, bundle) => {
        let url = `${bundle.inputData.url}?first_name=${bundle.inputData.first_name}&last_name=${bundle.inputData.last_name}&email=${bundle.inputData.email}`;
        z.console.log("url:", url);
        test("Check the page title after creating appointment", async (t) => {
          try 
          {
            z.console.log("in try in test");
            
            z.console.log(playwright.chromium.launch);
            const browser = await playwright.chromium.launch({
              args: chromium.args,
              executablePath: await chromium.executablePath,
              headless: chromium.headless,
            });
            z.console.log(" browser");
          
            const page = await browser.newPage();

            await page.goto(url, { waitUntil: "networkidle0" });
        
            let element = await page.locator('BUTTON[type="submit"]');

            await element.click();
            await page.waitForTimeout(6000);
            const title = await page.title();
            z.console.log(title);
            await browser.close();
            
            assert.strictEqual(title, "Confirmed - Calendly");
            return { created: true }
          } 
          catch (e)
          {
            return { created: false, error: e }
          }
        });
    },
  
    // In cases where Zapier needs to show an example record to the user, but we are unable to get a live example
    // from the API, Zapier will fallback to this hard-coded sample. It should reflect the data structure of
    // returned records, and have obviously dummy values that we can show to any user.
    sample: {
      created: true
    },

    // If the resource can have fields that are custom on a per-user basis, define a function to fetch the custom
    // field definitions. The result will be used to augment the sample.
    // outputFields: () => { return []; }
    // Alternatively, a static field definition should be provided, to specify labels for the fields
    outputFields: [
      { key:'created', type: 'boolean' }
    ]
  },
};